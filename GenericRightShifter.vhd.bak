library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity GenericRightShifter is
    generic (
        N : integer := 5  -- Set default size to 8 bits
    );
    Port (
        clk : in STD_LOGIC;
        reset : in STD_LOGIC;
        shift_amount : in STD_LOGIC_VECTOR(integer'left to 0);
        input_data : in STD_LOGIC_VECTOR(N-1 downto 0);
        shifted_data : out STD_LOGIC_VECTOR(N-1 downto 0)
    );
end GenericRightShifter;

architecture Behavioral of GenericRightShifter is
    signal shift_reg : STD_LOGIC_VECTOR(N-1 downto 0);
begin

    process (clk, reset)
    begin
        if reset = '1' then
            shift_reg <= (others => '0');
        elsif rising_edge(clk) then
            if shift_amount /= (others => '0') then
                shift_reg <= input_data srl to_integer(unsigned(shift_amount));
            else
                shift_reg <= input_data;
            end if;
        end if;
    end process;

    shifted_data <= shift_reg;

end Behavioral;
